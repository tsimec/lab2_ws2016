/**
 */
package at.ac.tuwien.big.statesml.provider;

import at.ac.tuwien.big.statesml.util.StatesMLAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class StatesMLItemProviderAdapterFactory extends StatesMLAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public StatesMLItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link at.ac.tuwien.big.statesml.SystemUnit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SystemUnitItemProvider systemUnitItemProvider;

	/**
	 * This creates an adapter for a {@link at.ac.tuwien.big.statesml.SystemUnit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSystemUnitAdapter() {
		if (systemUnitItemProvider == null) {
			systemUnitItemProvider = new SystemUnitItemProvider(this);
		}

		return systemUnitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link at.ac.tuwien.big.statesml.Attribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeItemProvider attributeItemProvider;

	/**
	 * This creates an adapter for a {@link at.ac.tuwien.big.statesml.Attribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeAdapter() {
		if (attributeItemProvider == null) {
			attributeItemProvider = new AttributeItemProvider(this);
		}

		return attributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link at.ac.tuwien.big.statesml.DataType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataTypeItemProvider dataTypeItemProvider;

	/**
	 * This creates an adapter for a {@link at.ac.tuwien.big.statesml.DataType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataTypeAdapter() {
		if (dataTypeItemProvider == null) {
			dataTypeItemProvider = new DataTypeItemProvider(this);
		}

		return dataTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link at.ac.tuwien.big.statesml.Function} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FunctionItemProvider functionItemProvider;

	/**
	 * This creates an adapter for a {@link at.ac.tuwien.big.statesml.Function}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFunctionAdapter() {
		if (functionItemProvider == null) {
			functionItemProvider = new FunctionItemProvider(this);
		}

		return functionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link at.ac.tuwien.big.statesml.Parameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterItemProvider parameterItemProvider;

	/**
	 * This creates an adapter for a {@link at.ac.tuwien.big.statesml.Parameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterAdapter() {
		if (parameterItemProvider == null) {
			parameterItemProvider = new ParameterItemProvider(this);
		}

		return parameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link at.ac.tuwien.big.statesml.StateSystem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StateSystemItemProvider stateSystemItemProvider;

	/**
	 * This creates an adapter for a {@link at.ac.tuwien.big.statesml.StateSystem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStateSystemAdapter() {
		if (stateSystemItemProvider == null) {
			stateSystemItemProvider = new StateSystemItemProvider(this);
		}

		return stateSystemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link at.ac.tuwien.big.statesml.Edge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EdgeItemProvider edgeItemProvider;

	/**
	 * This creates an adapter for a {@link at.ac.tuwien.big.statesml.Edge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEdgeAdapter() {
		if (edgeItemProvider == null) {
			edgeItemProvider = new EdgeItemProvider(this);
		}

		return edgeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link at.ac.tuwien.big.statesml.SelectionDivergence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SelectionDivergenceItemProvider selectionDivergenceItemProvider;

	/**
	 * This creates an adapter for a {@link at.ac.tuwien.big.statesml.SelectionDivergence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSelectionDivergenceAdapter() {
		if (selectionDivergenceItemProvider == null) {
			selectionDivergenceItemProvider = new SelectionDivergenceItemProvider(this);
		}

		return selectionDivergenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link at.ac.tuwien.big.statesml.SelectionConvergence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SelectionConvergenceItemProvider selectionConvergenceItemProvider;

	/**
	 * This creates an adapter for a {@link at.ac.tuwien.big.statesml.SelectionConvergence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSelectionConvergenceAdapter() {
		if (selectionConvergenceItemProvider == null) {
			selectionConvergenceItemProvider = new SelectionConvergenceItemProvider(this);
		}

		return selectionConvergenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link at.ac.tuwien.big.statesml.State} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StateItemProvider stateItemProvider;

	/**
	 * This creates an adapter for a {@link at.ac.tuwien.big.statesml.State}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStateAdapter() {
		if (stateItemProvider == null) {
			stateItemProvider = new StateItemProvider(this);
		}

		return stateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link at.ac.tuwien.big.statesml.Transition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransitionItemProvider transitionItemProvider;

	/**
	 * This creates an adapter for a {@link at.ac.tuwien.big.statesml.Transition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransitionAdapter() {
		if (transitionItemProvider == null) {
			transitionItemProvider = new TransitionItemProvider(this);
		}

		return transitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link at.ac.tuwien.big.statesml.FunctionCall} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FunctionCallItemProvider functionCallItemProvider;

	/**
	 * This creates an adapter for a {@link at.ac.tuwien.big.statesml.FunctionCall}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFunctionCallAdapter() {
		if (functionCallItemProvider == null) {
			functionCallItemProvider = new FunctionCallItemProvider(this);
		}

		return functionCallItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link at.ac.tuwien.big.statesml.ParameterValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterValueItemProvider parameterValueItemProvider;

	/**
	 * This creates an adapter for a {@link at.ac.tuwien.big.statesml.ParameterValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterValueAdapter() {
		if (parameterValueItemProvider == null) {
			parameterValueItemProvider = new ParameterValueItemProvider(this);
		}

		return parameterValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link at.ac.tuwien.big.statesml.IntegerValueSpecification} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegerValueSpecificationItemProvider integerValueSpecificationItemProvider;

	/**
	 * This creates an adapter for a {@link at.ac.tuwien.big.statesml.IntegerValueSpecification}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntegerValueSpecificationAdapter() {
		if (integerValueSpecificationItemProvider == null) {
			integerValueSpecificationItemProvider = new IntegerValueSpecificationItemProvider(this);
		}

		return integerValueSpecificationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link at.ac.tuwien.big.statesml.BooleanValueSpecification} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanValueSpecificationItemProvider booleanValueSpecificationItemProvider;

	/**
	 * This creates an adapter for a {@link at.ac.tuwien.big.statesml.BooleanValueSpecification}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBooleanValueSpecificationAdapter() {
		if (booleanValueSpecificationItemProvider == null) {
			booleanValueSpecificationItemProvider = new BooleanValueSpecificationItemProvider(this);
		}

		return booleanValueSpecificationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link at.ac.tuwien.big.statesml.AttributeValueSpecification} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeValueSpecificationItemProvider attributeValueSpecificationItemProvider;

	/**
	 * This creates an adapter for a {@link at.ac.tuwien.big.statesml.AttributeValueSpecification}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeValueSpecificationAdapter() {
		if (attributeValueSpecificationItemProvider == null) {
			attributeValueSpecificationItemProvider = new AttributeValueSpecificationItemProvider(this);
		}

		return attributeValueSpecificationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link at.ac.tuwien.big.statesml.Trigger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TriggerItemProvider triggerItemProvider;

	/**
	 * This creates an adapter for a {@link at.ac.tuwien.big.statesml.Trigger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTriggerAdapter() {
		if (triggerItemProvider == null) {
			triggerItemProvider = new TriggerItemProvider(this);
		}

		return triggerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link at.ac.tuwien.big.statesml.ChangeEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChangeEventItemProvider changeEventItemProvider;

	/**
	 * This creates an adapter for a {@link at.ac.tuwien.big.statesml.ChangeEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChangeEventAdapter() {
		if (changeEventItemProvider == null) {
			changeEventItemProvider = new ChangeEventItemProvider(this);
		}

		return changeEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link at.ac.tuwien.big.statesml.ChangeExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChangeExpressionItemProvider changeExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link at.ac.tuwien.big.statesml.ChangeExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChangeExpressionAdapter() {
		if (changeExpressionItemProvider == null) {
			changeExpressionItemProvider = new ChangeExpressionItemProvider(this);
		}

		return changeExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link at.ac.tuwien.big.statesml.StringValueSpecification} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StringValueSpecificationItemProvider stringValueSpecificationItemProvider;

	/**
	 * This creates an adapter for a {@link at.ac.tuwien.big.statesml.StringValueSpecification}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStringValueSpecificationAdapter() {
		if (stringValueSpecificationItemProvider == null) {
			stringValueSpecificationItemProvider = new StringValueSpecificationItemProvider(this);
		}

		return stringValueSpecificationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link at.ac.tuwien.big.statesml.SystemUnitLibrary} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SystemUnitLibraryItemProvider systemUnitLibraryItemProvider;

	/**
	 * This creates an adapter for a {@link at.ac.tuwien.big.statesml.SystemUnitLibrary}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSystemUnitLibraryAdapter() {
		if (systemUnitLibraryItemProvider == null) {
			systemUnitLibraryItemProvider = new SystemUnitLibraryItemProvider(this);
		}

		return systemUnitLibraryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link at.ac.tuwien.big.statesml.DataTypeLibrary} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataTypeLibraryItemProvider dataTypeLibraryItemProvider;

	/**
	 * This creates an adapter for a {@link at.ac.tuwien.big.statesml.DataTypeLibrary}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataTypeLibraryAdapter() {
		if (dataTypeLibraryItemProvider == null) {
			dataTypeLibraryItemProvider = new DataTypeLibraryItemProvider(this);
		}

		return dataTypeLibraryItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (systemUnitItemProvider != null) systemUnitItemProvider.dispose();
		if (attributeItemProvider != null) attributeItemProvider.dispose();
		if (dataTypeItemProvider != null) dataTypeItemProvider.dispose();
		if (functionItemProvider != null) functionItemProvider.dispose();
		if (parameterItemProvider != null) parameterItemProvider.dispose();
		if (stateSystemItemProvider != null) stateSystemItemProvider.dispose();
		if (edgeItemProvider != null) edgeItemProvider.dispose();
		if (selectionDivergenceItemProvider != null) selectionDivergenceItemProvider.dispose();
		if (selectionConvergenceItemProvider != null) selectionConvergenceItemProvider.dispose();
		if (stateItemProvider != null) stateItemProvider.dispose();
		if (transitionItemProvider != null) transitionItemProvider.dispose();
		if (functionCallItemProvider != null) functionCallItemProvider.dispose();
		if (parameterValueItemProvider != null) parameterValueItemProvider.dispose();
		if (integerValueSpecificationItemProvider != null) integerValueSpecificationItemProvider.dispose();
		if (booleanValueSpecificationItemProvider != null) booleanValueSpecificationItemProvider.dispose();
		if (attributeValueSpecificationItemProvider != null) attributeValueSpecificationItemProvider.dispose();
		if (triggerItemProvider != null) triggerItemProvider.dispose();
		if (changeEventItemProvider != null) changeEventItemProvider.dispose();
		if (changeExpressionItemProvider != null) changeExpressionItemProvider.dispose();
		if (stringValueSpecificationItemProvider != null) stringValueSpecificationItemProvider.dispose();
		if (systemUnitLibraryItemProvider != null) systemUnitLibraryItemProvider.dispose();
		if (dataTypeLibraryItemProvider != null) dataTypeLibraryItemProvider.dispose();
	}

}
